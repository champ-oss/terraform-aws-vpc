name: module

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - 'README.md'
  schedule:
    - cron: "0 7 * * *"

concurrency: this

env:
  TF_INPUT: false
  TF_IN_AUTOMATION: true
  TF_STATE_BUCKET: "env-tfbackend-oss-backend"
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}
  MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}
  MONGODB_ATLAS_ORG: ${{ secrets.MONGODB_ATLAS_ORG }}
  TF_VAR_mongodb_atlas_org: ${{ secrets.MONGODB_ATLAS_ORG }}
  SLACK_URL: ${{ secrets.SLACK_URL }}
  TF_VAR_slack_url: ${{ secrets.SLACK_URL }}
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
  NEW_RELIC_REGION: ${{ secrets.NEW_RELIC_REGION }}
  NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
  GITHUB_TOKEN: ${{ secrets.CHAMP_TESTING_GITHUB_TOKEN }}
  GITHUB_OWNER: "champ-testing"

jobs:
  list-examples:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        working-directory: examples
        run: |
          EXAMPLES=$(ls -1 | jq -Rsc '. / "\n" - [""]')
          echo $EXAMPLES
          echo "EXAMPLES=$EXAMPLES" >> $GITHUB_OUTPUT
    outputs:
      EXAMPLES: ${{ steps.set-matrix.outputs.EXAMPLES }}
  run-example:
    needs: list-examples
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        EXAMPLES: ${{ fromJson(needs.list-examples.outputs.EXAMPLES) }}
    defaults:
      run:
        shell: bash
        working-directory: examples/${{ matrix.EXAMPLES }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: hashicorp/setup-terraform@v3.0.0 # https://github.com/hashicorp/setup-terraform/releases
        with:
          terraform_version: 1.6.2 # https://github.com/hashicorp/terraform/releases
          terraform_wrapper: false
      - name: copy lockfile
        run: cp ../complete/.terraform.lock.hcl . || true
      - name: init
        run: terraform init
      - name: disable prevent_destroy
        working-directory: .
        run: find . -type f -name '*.tf' -exec sed -i'' -e 's/prevent_destroy = true/prevent_destroy = false/g' {} +
      - name: validate
        run: terraform validate
      - name: plan
        run: terraform plan -out=tfplan
      - name: apply
        run: terraform apply -auto-approve tfplan
      - name: check
        run: terraform plan -detailed-exitcode
      - name: integration test
        run: |
          for row in $(echo $(terraform output -json) | jq -c '. | to_entries[]'); do
            key=$(echo $row | jq -r '.key' | tr '[:lower:]' '[:upper:]')
            value=$(echo $row | jq -r '.value.value' | tr -d '\n[]" ')
            echo $key=$value
            export $key=$value
          done
          if [ -f test.sh ]; then bash test.sh; fi
      - name: destroy
        if: always()
        run: terraform destroy -auto-approve
  module:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [run-example]
    steps:
      - run: exit 1
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}
  github-issue-notification:
    needs: [ module ]
    if: failure() && github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: set-env-info
        run: |
          echo "GIT_REPO=$(echo ${GITHUB_REPOSITORY} | sed -e 's|.*/||')" >> $GITHUB_ENV
          echo "GITHUB_WORKFLOW_NAME=$(echo ${GITHUB_WORKFLOW} | sed -e 's|.*/||')" >> $GITHUB_ENV
          echo "GITHUB_REF_NAME=$(echo ${GITHUB_REF_NAME})" >> $GITHUB_ENV
      - name: github-issue-notification
        uses: champ-oss/action-github-issue-notification@v1.0.0-421559f
        with:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
          GITHUB_ORG: champ-oss
          GITHUB_REPO: ${{ env.GIT_REPO }}
          GITHUB_CUSTOM_LABEL: ${{ env.GITHUB_WORKFLOW_NAME }}
          GITHUB_BRANCH_LABEL: ${{ env.GITHUB_REF_NAME }}
